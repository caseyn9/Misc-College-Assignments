
==================== FINAL INTERFACE ====================
2016-12-21 01:50:01.4339022 UTC

interface main@main:Lab04 7103
  interface hash: 3fe07c9b9707d6ae909d9b110d1f1aa7
  ABI hash: 420a1ee1a066194a261976276d5564e2
  export-list hash: 9a54f2dd58fae03a3d92c053fb9b0cc8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbe72dce7169ea56d81ede094b67e0dc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lab04.done04
  Lab04.execute04
  Lab04.exit04
  Lab04.isFloat
  Lab04.mkprompt
  Lab04.newTotal
  Lab04.prompt04
  Lab04.thisIsLab04
  Lab04.State
module dependencies: BinTree
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.IO.Handle.Text 06d2dc7704bcfe88a2157fd04748ace5
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 638c10c4fd4901a0aca5b77c9f14123d
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BinTree 03e75a5640ff3e092d41e970eca6a216
  exports: 71448bd79c2ab5bcc92c157d1120de03
  BinTree 81aefdecbef457d83b602830ff5d95a6
  treeInsert 7475cf96315e3a4e3171a56d1fb96ed5
  treeShow 81aefdecbef457d83b602830ff5d95a6
c28365cdccad0b35f11bfeddbe28bb72
  $wnewTotal ::
    [GHC.Base.String] -> GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
b97940defff2f9713f5e9a0468c8164a
  type State =
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
8d5bd6616f40888ac0dd167abbcd17d3
  done04 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ command :: [GHC.Types.Char] ->
                 GHC.Base.eqString command Lab04.done1) -}
46c5ab7b6f04229f005abedf387c8ebd
  done1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exit"#) -}
4236d57be6945a902af45a4db60dbc7e
  execute04 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.IO.Handle.Types.Handle
    -> [GHC.Types.Char]
    -> (BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Types.IO
         (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U,U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lab04.execute1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                 GHC.Types.Float)>_R)) -}
f8d503b63afb4caf7df5dafc42d6b51a
  execute1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.IO.Handle.Types.Handle
    -> [GHC.Types.Char]
    -> (BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 5, Strictness: <L,U><L,U><S,U><L,U(U,U(U))><L,U> -}
f062a0470c3d2958441d73d33429052b
  exit04 :: GHC.Base.Monad m => Lab04.State -> m GHC.Types.Float
  {- Arity: 2,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><L,1*U(A,1*U(U))>,
     Unfolding: (\ @ (m :: * -> *)
                   $dMonad :: GHC.Base.Monad m
                   state :: Lab04.State ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ GHC.Types.Float
                   (case Text.Read.readEither6
                           @ GHC.Types.Float
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Float
                              Lab04.exit3
                              (case state of wild { (,) ds1 val ->
                               case val of ww { GHC.Types.F# ww1 ->
                               GHC.Float.$w$sshowSignedFloat1
                                 GHC.Float.$fShowFloat_$sshowFloat
                                 GHC.Show.shows18
                                 ww1
                                 (GHC.Types.[] @ GHC.Types.Char) } })) of wild {
                      [] -> Lab04.exit2
                      : x ds1
                      -> case ds1 of wild1 { [] -> x : ipv ipv1 -> Lab04.exit1 } })) -}
2c0ed47efd380b3fa590a49435472f2d
  exit1 :: GHC.Types.Float
  {- Strictness: b -}
8896c515d10e6da4ee57dcd05ed5b529
  exit2 :: GHC.Types.Float
  {- Strictness: b -}
a0b559594e39919e7867feeb898158c9
  exit3 :: Text.ParserCombinators.ReadP.P GHC.Types.Float
  {- Unfolding: ((GHC.Read.$fReadFloat7
                    GHC.Read.$fReadFloat_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Float>_R)
                   @ GHC.Types.Float
                   (Text.Read.readEither5 @ GHC.Types.Float)) -}
d1dee9b07baac2c80e878f9f30709a64
  isFloat :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Base.String ->
                 case Text.ParserCombinators.ReadP.run
                        @ GHC.Types.Float
                        Lab04.isFloat1
                        s of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) ds3 ds4 ->
                      case ds4 of wild2 {
                        []
                        -> case ds2 of wild3 {
                             [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False }
                        : ipv ipv1 -> GHC.Types.False } } }) -}
488ec65ac61da95dad3e204eac4f3232
  isFloat1 :: Text.ParserCombinators.ReadP.P GHC.Types.Float
  {- Unfolding: ((GHC.Read.$fReadFloat7
                    GHC.Read.$fReadFloat_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Float>_R)
                   @ GHC.Types.Float
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ GHC.Types.Float)) -}
b333b04c3ae923f8017bc11bcc3adfcf
  mkprompt :: Lab04.State -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                           GHC.Types.Float) ->
                 case ds1 of wild { (,) ds2 val ->
                 GHC.Float.$fShowFloat_$cshow val }) -}
5d246e8b97d36c1f03a2c27a93dff2b4
  newTotal :: [GHC.Base.String] -> GHC.Types.Float -> GHC.Types.Float
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [GHC.Base.String] w1 :: GHC.Types.Float ->
                 case w1 of ww { GHC.Types.F# ww1 ->
                 case Lab04.$wnewTotal w ww1 of ww2 { DEFAULT ->
                 GHC.Types.F# ww2 } }) -}
7b38c4c438c0052ee77d83a27c7ca21e
  prompt04 ::
    GHC.IO.Handle.Types.Handle -> Lab04.State -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,U><L,1*U(A,1*U(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lab04.prompt1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <Lab04.State>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a478abbc17ddb71a21a6bebc9737533e
  prompt1 ::
    GHC.IO.Handle.Types.Handle
    -> Lab04.State
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,1*U(A,1*U(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ hout :: GHC.IO.Handle.Types.Handle
                   state :: Lab04.State
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hout
                   (Lab04.mkprompt state)
                   GHC.Types.False
                   eta) -}
c3b838dad7606e957eef18366e6560bc
  thisIsLab04 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "This is Lab 4"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

