
==================== FINAL INTERFACE ====================
2016-12-21 00:32:40.5777402 UTC

interface main@main:Main 7103
  interface hash: ad3260c167eb5bf26d2137c9040da254
  ABI hash: fb0c16b92d9cae07ed6fde489843a02a
  export-list hash: 7301f5357350931e87b8cd35f5d28cc9
  orphan hash: cb2043aa627a5610f73dee6a9373986e
  flag hash: 1f1f1440a12ada2029a46d1638f4ddb2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.test_R_insert_br_new
  Main.test_R_insert_br_old
  Main.test_R_insert_emp
  Main.test_R_insert_leaf
  Main.test_R_lkp_branch
  Main.test_R_lkp_emp
  Main.test_R_lkp_leaf_fail
  Main.test_R_lkp_leaf_ok
  Main.test_R_map_branch
  Main.test_R_map_emp
  Main.test_R_map_leaf
  Main.test_R_show_br_emp_a1
  Main.test_R_show_br_left_a1_b2
  Main.test_R_show_br_right_a1_b2
  Main.test_R_show_empty
  Main.test_R_show_emptyX4
  Main.test_R_show_leaf_1a
  Main.test_R_show_leaf_a1
  Main.test_add_revise
  Main.test_done_exit
  Main.test_done_stay
  Main.test_empty_add
  Main.test_exit_result
  Main.test_fix_bad_branch
  Main.test_fix_bad_empty
  Main.test_fix_good_branch
  Main.test_fix_good_empty
  Main.test_help
  Main.test_list
  Main.test_prompt
  Main.test_remove_branch
  Main.test_remove_leaf
  Main.tests
module dependencies: BinTree Lab04 REPL
package dependencies: HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b
                      QuickCheck-2.8.2@Quick_57CTPkkZNnkFbbczhO1353
                      Win32-2.3.1.0@Win32_ELFLzTRksT8Dql3wobiWvb
                      ansi-terminal-0.6.2.3@ansit_17j0yRazsq84la3DzBiNwu
                      ansi-wl-pprint-0.6.7.3@ansiw_6EriyYVvQuNHdLfQN1IBjX
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hostname-1.0@hostn_8259ix4SDG1KmuPcUnOScA integer-gmp-1.0.0.0
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_7Qv4dDT5WBF9U3tMWkytIb
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      test-framework-0.8.1.1@testf_2RKbXiMlif20IWKx4lR7cW
                      test-framework-quickcheck2-0.3.0.3@testf_7xHQ2BMWV71Ktv2HDxmg3M
                      test-framework-hunit-0.3.0.2@testf_AlQmNT2auEZFV1ZYXzMnwS
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tf-random-0.5@tfran_5P5699oQ23G51oobh6Q5M2
                      time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      xml-1.3.14@xml_AyrkYt7P0aQDgNiMBs2bvw
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Format.Parse
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit 66bcf89478e54cab0bc320939852d08e
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit.Base 53f2f28a272b00788aa8b187390d184e
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Char 612e350e38947989d78fc181dfd596f1
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.IO.Handle 631f32e0ad65df940f6a2b3e721d8452
import  -/  base-4.8.2.0:GHC.IO.Handle.FD f260998705ecc3bf793b3d885cfc0751
import  -/  base-4.8.2.0:GHC.IO.IOMode 89fcaeb96929360e7be5a7bbb14ceec9
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 638c10c4fd4901a0aca5b77c9f14123d
import  -/  base-4.8.2.0:System.IO.Unsafe fc45e72b9d9eb2c797a8c81f5821fcd0
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  BinTree 03e75a5640ff3e092d41e970eca6a216
  exports: 71448bd79c2ab5bcc92c157d1120de03
  BinTree 81aefdecbef457d83b602830ff5d95a6
  Branch 770df489c61d06c588dcf92a12ae9eb8
  Empty cda84d3d71af71ac5a3a48fcf6a72805
  Leaf 44887b80f944cca79476647b0ff99648
  alphaChr 5b043f92b796733c408871f6389f82d7
  alphaOrd b4723a52eae01ac8eabcddada5e5a5df
  br_emp_a1 1534cd93e7527ffa4253268f816e201f
  br_left_a1_b2 5a581cffdf04d155354cf09e998662fa
  br_right_a1_b2 9510e1d4f2203806e120fd77cb94b487
  empCI 98357bbe9d56309630696b0046410962
  empIC 99a11b14022de19bde2399d55dedf3a4
  emptyX4 2a2f995187ba44169d2b062002e495b3
  ins1 bed1b510fbf35ff1361c2317ee2654d0
  ins2 ea861d9c478a9e6da31c928e3fd8e1c4
  ins3 0b081f769df2464c8b3c05ad0fd5be95
  ins4 6db5e6415cff7ffc2aa571f912af5265
  leaf_1a 585376599aafe59b1a7eff78668e1dbc
  leaf_2b bd6c017d481eb15f9b66bd17c5a35c18
  leaf_a1 0cb1003862a205833e380f42621bc553
  leaf_b2 1c55d2e196831b64c5b1842df25eb1a7
  treeLookup 30a390682c1902385bfa69304d3f161b
  treeMap f267cd3603a2f8b0aa69a2a718d2dc6c
import  -/  Lab04 420a1ee1a066194a261976276d5564e2
  exports: 9a54f2dd58fae03a3d92c053fb9b0cc8
  State b97940defff2f9713f5e9a0468c8164a
  done04 8d5bd6616f40888ac0dd167abbcd17d3
  execute04 4236d57be6945a902af45a4db60dbc7e
  exit04 f062a0470c3d2958441d73d33429052b
  mkprompt b333b04c3ae923f8017bc11bcc3adfcf
import  -/  REPL 522713d1306eda27264d8d9a1f4651fb
  exports: d909f20870ecd914effb556280d3fcfc
import  -/  test-framework-0.8.1.1@testf_2RKbXiMlif20IWKx4lR7cW:Test.Framework 4f08929b71b5087be67282460e63535b
import  -/  test-framework-0.8.1.1@testf_2RKbXiMlif20IWKx4lR7cW:Test.Framework.Core 857a09e2544855e1a0515f759582c440
import  -/  test-framework-0.8.1.1@testf_2RKbXiMlif20IWKx4lR7cW:Test.Framework.Runners.Console 43537496b72c7dcbcb43bac41e6d27b0
import  -/  test-framework-quickcheck2-0.3.0.3@testf_7xHQ2BMWV71Ktv2HDxmg3M:Test.Framework.Providers.QuickCheck2 66cb1708ca1c12794e3af16a392dac7e
import  -/  test-framework-hunit-0.3.0.2@testf_AlQmNT2auEZFV1ZYXzMnwS:Test.Framework.Providers.HUnit ca9160b43a8c335e665617ebb5eb35fb
11a7a6361d904610a044d1dbd54575d3
  $s$fEq(,) ::
    GHC.Classes.Eq
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                     GHC.Types.Float)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fEq(,)1
                     GHC.Classes.$fEqFloat)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fEq(,)1
                     GHC.Classes.$fEqFloat) -}
84f42e7c18f645cbf6929904ccfce86b
  $s$fEq(,)1 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Base.String GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fEq(,)_$s$fEqBinTree -}
e6e3b042f08ecc24865221bdafc6d504
  $s$fEq(,)2 ::
    BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
                   b :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float ->
                 case BinTree.$fEqBinTree_$c==
                        @ [GHC.Types.Char]
                        @ GHC.Types.Float
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        GHC.Classes.$fEqFloat
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94ad2876869ab6cebdf17c87b5a17e01
  $s$fEq(,)3 ::
    GHC.Classes.Eq
      ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float),
       GHC.Types.Bool)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float),
                     GHC.Types.Bool)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fEq(,)4
                     GHC.Classes.$fEqBool)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fEq(,)4
                     GHC.Classes.$fEqBool) -}
8a2fb1c1594bf0d1a95fdfa2f1fc59a3
  $s$fEq(,)4 ::
    GHC.Classes.Eq
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEq(,) -}
92361691c7799ba475fffe6a1636ac1b
  $s$fEq(,)_$s$fEqBinTree ::
    GHC.Classes.Eq (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
                  (BinTree.$fEqBinTree_$c==
                     @ [GHC.Types.Char]
                     @ GHC.Types.Float
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Classes.$fEqFloat)
                  Main.$s$fEq(,)2 -}
93615cb9b12fb62df8a07a993c99599f
  $s$fEqBinTree ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Int
                     @ [GHC.Types.Int]
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEq[]_$s$fEq[])
                  Main.$s$fEqBinTree1 -}
4b24fd15feb10ae9ff543628f45fd6db
  $s$fEqBinTree1 ::
    BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
    -> BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
                   b :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int] ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Int
                        @ [GHC.Types.Int]
                        GHC.Classes.$fEqInt
                        GHC.Classes.$fEq[]_$s$fEq[]
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5ce1e1d6876fed0156d1225e38b25d2c
  $s$fEqBinTree2 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqChar)
                  Main.$s$fEqBinTree3 -}
a317d7fba1f52dcb9dde26af83e1bb1a
  $s$fEqBinTree3 ::
    BinTree.BinTree GHC.Types.Int GHC.Types.Char
    -> BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
                   b :: BinTree.BinTree GHC.Types.Int GHC.Types.Char ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Int
                        @ GHC.Types.Char
                        GHC.Classes.$fEqInt
                        GHC.Classes.$fEqChar
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
90076dde9cb0efbb75e589bb8f3b5d69
  $s$fEqBinTree4 ::
    GHC.Classes.Eq (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                  (BinTree.$fEqBinTree_$c==
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Classes.$fEqChar
                     GHC.Classes.$fEqInt)
                  Main.$s$fEqBinTree5 -}
fa5460d2d73d4d8e51ab0a2d314db456
  $s$fEqBinTree5 ::
    BinTree.BinTree GHC.Types.Char GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
                   b :: BinTree.BinTree GHC.Types.Char GHC.Types.Int ->
                 case BinTree.$fEqBinTree_$c==
                        @ GHC.Types.Char
                        @ GHC.Types.Int
                        GHC.Classes.$fEqChar
                        GHC.Classes.$fEqInt
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f89e2dc2d4678185ab1378a155291c8b
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  Main.$s$fEqMaybe1
                  (GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Int GHC.Classes.$fEqInt) -}
f424f16db69205d8f2e5f596f54823e1
  $s$fEqMaybe1 ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GHC.Types.Int
                   ds1 :: GHC.Base.Maybe GHC.Types.Int ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } }) -}
cfa36c6f6f670ef0a32b5f47b4bc6853
  $s$fShow(,) ::
    GHC.Show.Show
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                     GHC.Types.Float)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     Main.$s$fShow(,)1
                     GHC.Float.$fShowFloat)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList -}
1bdc68cb28623703f403a730e549c507
  $s$fShow(,)1 ::
    GHC.Show.Show (BinTree.BinTree GHC.Base.String GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fShow(,)_$s$fShowBinTree -}
7c66029f5014cb8efce5caec0738ef63
  $s$fShow(,)2 ::
    BinTree.BinTree [GHC.Types.Char] GHC.Types.Float -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float ->
                 BinTree.treeShow
                   @ [GHC.Types.Char]
                   @ GHC.Types.Float
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Float.$fShowFloat
                   GHC.Types.False
                   eta) -}
c2dfee36286bedecc8e2bb711b119331
  $s$fShow(,)3 ::
    GHC.Types.Int
    -> BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree [GHC.Types.Char] GHC.Types.Float
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ [GHC.Types.Char]
                         @ GHC.Types.Float
                         GHC.Show.$fShow[]_$s$fShow[]1
                         GHC.Float.$fShowFloat
                         GHC.Types.False
                         x))
                   s) -}
82dbb280b0d61f99ca0f52e6960c1b3b
  $s$fShow(,)4 ::
    GHC.Show.Show
      ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
        GHC.Types.Float),
       GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float),
                     GHC.Types.Bool)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     Main.$s$fShow(,)5
                     GHC.Show.$fShowBool)
                  Main.$s$fShow(,)_$s$fShow(,)_$cshow1
                  Main.$s$fShow(,)_$s$fShow(,)_$cshowList1 -}
68d0e44a876804656243b4002c82505e
  $s$fShow(,)5 ::
    GHC.Show.Show
      (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShow(,) -}
463488a475244f5b0827c5dd483c822e
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                   @ GHC.Types.Float
                   Main.$s$fShow(,)1
                   GHC.Float.$fShowFloat
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6fe7d81c2c2ce814cc22b71c1864c50d
  $s$fShow(,)_$s$fShow(,)_$cshow1 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U(U)),U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                          GHC.Types.Float),
                         GHC.Types.Bool) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   @ GHC.Types.Bool
                   Main.$s$fShow(,)5
                   GHC.Show.$fShowBool
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
76fbe09d8190c5b5e1df947d835a4dc8
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                            GHC.Types.Float)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ (BinTree.BinTree GHC.Base.String GHC.Types.Float)
                      @ GHC.Types.Float
                      Main.$s$fShow(,)1
                      GHC.Float.$fShowFloat
                      GHC.Show.shows18)
                   eta
                   eta1) -}
267ecab6c20d57c471720fdb031be55e
  $s$fShow(,)_$s$fShow(,)_$cshowList1 ::
    [((BinTree.BinTree GHC.Base.String GHC.Types.Float,
       GHC.Types.Float),
      GHC.Types.Bool)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                             GHC.Types.Float),
                            GHC.Types.Bool)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float)
                      @ GHC.Types.Bool
                      Main.$s$fShow(,)5
                      GHC.Show.$fShowBool
                      GHC.Show.shows18)
                   eta
                   eta1) -}
59afeea1687c3bd3860cd379cacb64e5
  $s$fShow(,)_$s$fShowBinTree ::
    GHC.Show.Show (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree [GHC.Types.Char] GHC.Types.Float)
                  Main.$s$fShow(,)3
                  Main.$s$fShow(,)2
                  (BinTree.$fShowBinTree_$cshowList
                     @ [GHC.Types.Char]
                     @ GHC.Types.Float
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Float.$fShowFloat) -}
0d1dfc6f9ae3b6f5aa60b1097bcb6d21
  $s$fShowBinTree ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                  Main.$s$fShowBinTree2
                  Main.$s$fShowBinTree1
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Int
                     @ [GHC.Types.Int]
                     GHC.Show.$fShowInt
                     GHC.Show.$fShow[]_$s$fShow[]) -}
f6cecc8732f8392c64a442b67dcc946a
  $s$fShowBinTree1 ::
    BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int] ->
                 BinTree.treeShow
                   @ GHC.Types.Int
                   @ [GHC.Types.Int]
                   GHC.Show.$fShowInt
                   GHC.Show.$fShow[]_$s$fShow[]
                   GHC.Types.False
                   eta) -}
ece11027b111fa52e503425ef32dbcfc
  $s$fShowBinTree2 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Int [GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Int
                         @ [GHC.Types.Int]
                         GHC.Show.$fShowInt
                         GHC.Show.$fShow[]_$s$fShow[]
                         GHC.Types.False
                         x))
                   s) -}
0d89419783409c8a26a9e70eeba649f4
  $s$fShowBinTree3 ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                  Main.$s$fShowBinTree5
                  Main.$s$fShowBinTree4
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Int
                     @ GHC.Types.Char
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowChar) -}
007ddb7c828aa348bcbade7b07b2e283
  $s$fShowBinTree4 ::
    BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Int GHC.Types.Char ->
                 BinTree.treeShow
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowChar
                   GHC.Types.False
                   eta) -}
6d58043f90b4429170810f549959f3a3
  $s$fShowBinTree5 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Int GHC.Types.Char -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Int
                         @ GHC.Types.Char
                         GHC.Show.$fShowInt
                         GHC.Show.$fShowChar
                         GHC.Types.False
                         x))
                   s) -}
844e812213740bc9813e1c0643333874
  $s$fShowBinTree6 ::
    GHC.Show.Show (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                  Main.$s$fShowBinTree8
                  Main.$s$fShowBinTree7
                  (BinTree.$fShowBinTree_$cshowList
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Show.$fShowChar
                     GHC.Show.$fShowInt) -}
6e4500eeb13e77cdc1628045a9a19cfc
  $s$fShowBinTree7 ::
    BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: BinTree.BinTree GHC.Types.Char GHC.Types.Int ->
                 BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   eta) -}
13dec293f4016827acede3f5b4d87aa8
  $s$fShowBinTree8 ::
    GHC.Types.Int
    -> BinTree.BinTree GHC.Types.Char GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   x :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
                   s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BinTree.treeShow
                         @ GHC.Types.Char
                         @ GHC.Types.Int
                         GHC.Show.$fShowChar
                         GHC.Show.$fShowInt
                         GHC.Types.False
                         x))
                   s) -}
2edd78cece7f0bde71bf2a97b8d48d06
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (GHC.Show.$fShowMaybe_$cshow @ GHC.Types.Int GHC.Show.$fShowInt)
                  Main.$s$fShowMaybe1 -}
34b1d8bad451a916aeb230bcf8ea34fb
  $s$fShowMaybe1 :: [GHC.Base.Maybe GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [GHC.Base.Maybe GHC.Types.Int] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.shows18)
                   eta
                   eta1) -}
3d73c81e4b607b446d567e1f44d1e0db
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
37f53c1eb77dc696b43525a132024b7d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Framework.Runners.Console.defaultMain1
                   Main.tests) -}
7a3ea0d6ca750e9996dc3b7dc85bb388
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
e9bfa451b541d0236c41595da7750e70
  test_R_insert_br_new :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests362 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
39346ae68460124b4b03376ecb385f80
  test_R_insert_br_old :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests348 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0245571c312adfac087b4c685cb5fbc1
  test_R_insert_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests385 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a0167609f3bd689fdbdba45a20b5c8fc
  test_R_insert_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests374 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
2d2ace074b826410f0dbf9679bb03475
  test_R_lkp_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests293 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
28e63b2ca17e6c87a80520260a80dbe2
  test_R_lkp_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests336 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
142ff8f9d36b8a217845675644fe9d42
  test_R_lkp_leaf_fail :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests323 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c843b02d92c2ba2c85a8d795eac57b13
  test_R_lkp_leaf_ok :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests308 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
273cd74e519ca08d0da52542dfe63103
  test_R_map_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests394 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
ff30209afbf0cc83dad5f8bdaafb10b6
  test_R_map_emp :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests421 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
005be5a51ec16e97ec0932076b25bb65
  test_R_map_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests410 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f607fc2144503bc73f45750926dbdece
  test_R_show_br_emp_a1 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests466 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3ea351c168b3efa42366204fc77b28f5
  test_R_show_br_left_a1_b2 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests454 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
25df9bc87bd6b62a4c613d3c8f860a66
  test_R_show_br_right_a1_b2 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests443 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
930d778d18ba074f1bca5be55aa053c9
  test_R_show_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests497 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d68518e3d9b8ffeb0a2a99087524c381
  test_R_show_emptyX4 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests432 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8b5b50f293beba47524799c905c9bc92
  test_R_show_leaf_1a :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests476 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
5ddd13607c335a3502ed512eb469a1be
  test_R_show_leaf_a1 :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests487 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b1ff4bebfc44a09ed31b8d8c18cc5155
  test_add_revise :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests176 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
66e50044264c09df8a324a2dad90bb25
  test_done_exit :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests241 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
0ddc50a9f70fa69b8f1d33018a37d115
  test_done_stay :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests223 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
9c3390816859beb02fc05c20910fc175
  test_empty_add :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests188 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1cd8d7dc72f653e1e5819661e8448860
  test_exit_result :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests204 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
3c06832965bfc4b9545ba71611be4baf
  test_fix_bad_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests135 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1622c0e73011f473a114bdcd464e2f1d
  test_fix_bad_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests162 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c27efe8c3b1bf2438f2eddd102008ca2
  test_fix_good_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests114 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
4bc7451d7e665d8a977272bdc8739ac2
  test_fix_good_empty :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests149 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
94d50f2d314b9f78bed8dc5b1d80052a
  test_help :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests17 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
712cb6af1954179bbdffb3d8cff82a13
  test_list :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests49 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
99db49db53e07d557634f03803df2222
  test_prompt :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests256 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b4cd76f22585d1eae9a24ca38d8da093
  test_remove_branch :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests79 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8bddc8f38cd8616d99e6ff8bc635cb68
  test_remove_leaf :: Test.HUnit.Lang.Assertion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.tests100 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7b7f783fcc59b0be4021049f48de7772
  tests :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests273
                   Main.tests1) -}
918bec9ff696dd489e6c5fb49c3dc41c
  tests1 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests253
                   Main.tests2) -}
648233b1aeb879386ff4d7c29c3cd8f2
  tests10 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests134
                   Main.tests11) -}
05e222c7883014fdd51cab449e3d6409
  tests100 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests106
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests105
                   Main.tests101
                   eta2) -}
00023add88b202c46f89a89b40838aba
  tests101 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests102
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
8bdeb0416adf24ec6e4d8494955ef126
  tests102 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests88
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests30
                        Main.tests103
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
ab23f264e56ae8d32e48ecd377304c17
  tests103 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests104, Main.tests58)) -}
29f0a622f6838170167b05cea9bb1080
  tests104 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests58) -}
9d7f72224af24fbdac43b8590fe2f0cb
  tests105 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests91, Main.tests21)) -}
bc432b03bd565817bfad1e88da394a9f
  tests106 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests107) -}
757ec306ea574cb7d55b173aa2278cff
  tests107 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests108) -}
a03280d01c0dc542bf227b5cde903f2e
  tests108 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests109
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
3e0985997266552a57f4126f638daf18
  tests109 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests110)) -}
5750c6931c8c3f2d6b5cefd13fd04abb
  tests11 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests113
                   Main.tests12) -}
a7e4fb26a2cf8e1d1edf07619f4b9789
  tests110 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests111
                   Main.tests41
                   Main.tests111
                   Main.tests40) -}
407dce8a470a1386f12f2f9877acfc02
  tests111 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 131) -}
ca65b42f839ea059ece868fbcc1d55e4
  tests112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Remove Leaf {2 marks}"#) -}
e4beb5990135f33cb4449fedd925d9e2
  tests113 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests133
                   Main.tests114
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
3e2750e1fe848d52a9465da0c4ea8d5c
  tests114 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests127
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests126
                   Main.tests115
                   eta2) -}
9513b1ddc28e8cf9f5e9ce0e579efa3c
  tests115 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests116
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
2f612bb04c81e3ab5ed0a29772048940
  tests116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests125
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests117
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests125
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
9ddc1699dfac687b92ec46a1613f5df9
  tests117 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests119, Main.tests118)) -}
7fbfab28b2bb9eba570291615222d964
  tests118 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 42.0) -}
3b171c19703859f9c80115c5bad3ab15
  tests119 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests124
                   Main.tests123
                   Main.tests120) -}
0d783adb9d6ccbe19da9db2b187725de
  tests12 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests99
                   Main.tests13) -}
205c1001c07bd0cc0f63c23e19a62423
  tests120 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests122
                   Main.tests121) -}
62a8d2b8700c875bef450afcb38f1aeb
  tests121 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 31.0) -}
cddf1260aafe308ae90064264cacbf20
  tests122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "b"#) -}
71c3617c1cdb994889467c1e5625b070
  tests123 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 11.0) -}
432588eff1aa4fb12f65bb2b7fe8a4bf
  tests124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "a"#) -}
5f84f9a7ce60b89c256a75d5dac092ac
  tests125 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_good_branch.log"#) -}
3bde0230684df94fb3c1d6dc2ef64ad8
  tests126 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: ((Main.tests117, GHC.Types.True)) -}
3004615da6d0a57c9caf0306c49469aa
  tests127 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests128) -}
29f1407f88d49ecb1d54810898549c08
  tests128 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests129) -}
aa82d7c065b20ad45afe560dac680f49
  tests129 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests130
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
44d7a8c5f12cca269af6e94faa6953d4
  tests13 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests78
                   Main.tests14) -}
6307f0ba3d07efee59822c8479ea5696
  tests130 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests131)) -}
3940757092c6ae5d4e6fff659d1c6676
  tests131 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests132
                   Main.tests41
                   Main.tests132
                   Main.tests40) -}
d3df1b514053afce6b9588030e26f893
  tests132 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 121) -}
c6506fab1aa7d19c67048add76c2e2d8
  tests133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Good Branch {1 mark}"#) -}
668aa2ff9ca729906dfd729c66301557
  tests134 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests147
                   Main.tests135
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
707fe5f96a40536c3f73387e56f619f2
  tests135 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests141
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests140
                   Main.tests136
                   eta2) -}
5492933573689a3a026f6a6d6f1d37d4
  tests136 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests137
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
44129f8921dd74ae35443c87fca85c99
  tests137 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests139
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests138
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests139
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
4a0eb2a7124255ea97614e5a315b1805
  tests138 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests119, Main.tests58)) -}
50ea09e8efc695890793b358f068a906
  tests139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_bad_branch.log"#) -}
b38e4072f5a76551020782c7fb464337
  tests14 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests48
                   Main.tests15) -}
cbf36c452f71b44fd496e0ba02dea21c
  tests140 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: ((Main.tests117, GHC.Types.False)) -}
985ac1beb0ca10f23bb49ba5b4d60b0c
  tests141 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests142) -}
2a2e61628820844a4f7b4175084b6386
  tests142 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests143) -}
bf077da2c02bea08aacf71349b7c5442
  tests143 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests144
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
d274bd2ab170bdb024abac0ac5f8f15d
  tests144 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests145)) -}
2db273257ac8d3d176ec07d911f0077d
  tests145 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests146
                   Main.tests41
                   Main.tests146
                   Main.tests40) -}
a18e3cb26fa8d722d73fef3aa293b6d0
  tests146 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 112) -}
a8966bd7aed0ef18ec1c115342ecefac
  tests147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Bad Branch {1 mark}"#) -}
69880967ebab3b66ab9c98895037e53a
  tests148 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests160
                   Main.tests149
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
2196624ffed6ae2a8bd6bb993e9da762
  tests149 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (Lab04.State, GHC.Types.Bool)
                   Main.tests154
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests153
                   Main.tests150
                   eta2) -}
5ed9d089abf02cc17c98477d4050adfc
  tests15 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests16
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
dae1f58ac6534cf802714078b2767226
  tests150 :: (Lab04.State, GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (Lab04.State, GHC.Types.Bool)
                   Main.tests151
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <(Lab04.State, GHC.Types.Bool)>_R))) -}
28f995684fbcf2e92e6c754a28f5af58
  tests151 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Lab04.State, GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests152
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests20
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests152
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
c4ad97e832476a963fd5122bd4cfe62c
  tests152 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_good_empty.log"#) -}
ddf81ed6691270cb5fa8bda61edd4c16
  tests153 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.tests20, GHC.Types.True)) -}
7968d7d9354448fb78e0549d588068bd
  tests154 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests155) -}
a7b6ad5608f3a6fe5cd6ac8502b5ae17
  tests155 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests156) -}
33ccf67250467c8c05ad5565f53ba9e7
  tests156 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests157
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
5be7d4e1aa52a57c71f8906224efc9df
  tests157 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests158)) -}
e906236ddb5814e3db15cd6af1070d0d
  tests158 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests159
                   Main.tests41
                   Main.tests159
                   Main.tests40) -}
8eef47e373dbcbf80fa4552433dcd2ff
  tests159 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 103) -}
56504c4073ec16b04d0a5d0d952bbde2
  tests16 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests47
                   Main.tests17
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
9f33d54de63d97ef16c7a0c6d9bf139e
  tests160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Good Empty {1 mark}"#) -}
99705f39e49df2220105c0ec63b274b4
  tests161 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests174
                   Main.tests162
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
ba58594102df8573dbb06ec2d96d0f6e
  tests162 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests168
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)3
                   Main.$s$fShow(,)4
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests167
                   Main.tests163
                   eta2) -}
485f149170e401b4b360a0689d4d3f5d
  tests163 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                       GHC.Types.Float),
                      GHC.Types.Bool)
                   Main.tests164
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((BinTree.BinTree GHC.Base.String GHC.Types.Float,
                                GHC.Types.Float),
                               GHC.Types.Bool)>_R))) -}
3b41ee753f07b038bd36faa8d0bf4932
  tests164 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
            GHC.Types.Float),
           GHC.Types.Bool) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests166
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests32
                        Main.tests165
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests166
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    (ipv3, GHC.List.null @ GHC.Types.Char ipv9) #) } } } } } }) -}
8076f627aa2b11b41f2195811edcf176
  tests165 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((BinTree.Empty @ GHC.Base.String @ GHC.Types.Float,
                  Main.tests58)) -}
0873f93e0e432771ff8db3e04e60b12d
  tests166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/fix_bad_empty.log"#) -}
bff33a10ae09e32234307451d118e5b2
  tests167 ::
    ((BinTree.BinTree GHC.Base.String GHC.Types.Float,
      GHC.Types.Float),
     GHC.Types.Bool)
  {- HasNoCafRefs, Unfolding: ((Main.tests20, GHC.Types.False)) -}
1a2ff1643c40a9f64924e0145cab8d9a
  tests168 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests169) -}
16f844aa47ea355cd1c9b77bfab184c8
  tests169 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests170) -}
48f46ee58e3602b7528aafffa856fd89
  tests17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Base.String]
                   Main.tests35
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   GHC.Show.$fShow[]_$s$fShow[]2
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests24
                   Main.tests18
                   eta2) -}
e53a387750796317391dbf3408ed5d27
  tests170 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests171
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
c491f0bf641b497ef9e5f5feb0149f5c
  tests171 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests172)) -}
8cf55ec5b1fdea19ab26d16572c8aa21
  tests172 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests173
                   Main.tests41
                   Main.tests173
                   Main.tests40) -}
79f325846240b650d6a579b03a7b8529
  tests173 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 94) -}
8d6b2805c099f005732bb695c72431df
  tests174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Fix Bad Empty {1 mark}"#) -}
e40dc36cc665b3a2d44560d0b2efba3c
  tests175 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests186
                   Main.tests176
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
f3cafcc17572cf66f990436c3fe11003
  tests176 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests180
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests103
                   Main.tests177
                   eta2) -}
719efa38e6f0949a2a23fc5087e90b58
  tests177 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests178
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
17b010710aa8bd609166eea3ae4fac51
  tests178 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests179
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        Main.tests20
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 (# ipv10, ipv7 #) } } } } } } }) -}
ab0cf0700011849766c70c590aea54d5
  tests179 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/add_revise.txt"#) -}
0680e2cce2a0aba93aebc1aeb0959264
  tests18 :: [GHC.Base.String]
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ [GHC.Base.String]
                   Main.tests19
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R))) -}
9bfa6e81c541ae04ac6ebdf544199034
  tests180 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests181) -}
8c464630fa0af7a64e10a2a4c8c2a623
  tests181 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests182) -}
328ba1db5a011c4b5f9cee9d7bf64ffe
  tests182 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests183
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
44a866078b0324794920ccaaeeb31f7c
  tests183 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests184)) -}
b2383e3d0263d4bfc3084145d5e48922
  tests184 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests185
                   Main.tests41
                   Main.tests185
                   Main.tests40) -}
fdff7dfce58e001fea2d2926db3833a5
  tests185 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 85) -}
3f7efe22392c9880aa1b9c9bb5d25c49
  tests186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Revise Add {2 marks}"#) -}
bb462eb166b7be86de67d98f495a83d7
  tests187 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests199
                   Main.tests188
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
431565f435577106cdf78d64f295513b
  tests188 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests193
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests192
                   Main.tests189
                   eta2) -}
03eb43faf1896f8cbdcb3742a213e9dc
  tests189 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests190
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
d39539c9384c70dc44e920547abec1f6
  tests19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests23
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests22
                        Main.tests20
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests23
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    Data.OldList.sortBy
                      @ GHC.Base.String
                      GHC.Classes.$fOrd[]_$s$ccompare1
                      (Data.OldList.words ipv9) #) } } } } } }) -}
3442705882aa3841e02b36cbc858b83a
  tests190 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests191
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests34
                        Main.tests20
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
99cd85a4e75a5becdf7bd3e16ca4d8eb
  tests191 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/empty_add.txt"#) -}
3ae29c1358225fc911eabea0964443de
  tests192 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests85, Main.tests86)) -}
598bc0b2a78165bb01d01d9223c239eb
  tests193 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests194) -}
3334b0757dfdb0de0a203cad993377e3
  tests194 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests195) -}
1d92a21b3e1934c40ccd9f55c83f5f73
  tests195 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests196
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
19c920e8eaa8fd83fd1e5ede9e8eff4f
  tests196 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests197)) -}
5bd45ab5fc680ee808fbd68cfe4718df
  tests197 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests198
                   Main.tests41
                   Main.tests198
                   Main.tests40) -}
38042109e2270fb6c7871032f597abf2
  tests198 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 74) -}
7233a03ac53657c9c6b1f722728823f3
  tests199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Add to Empty {2 marks}"#) -}
138c61bf7ef6ba1768740f759abff572
  tests2 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests219
                   Main.tests3) -}
3c14414233dd9692190d7e1159c7588b
  tests20 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((BinTree.Empty @ GHC.Base.String @ GHC.Types.Float,
                  Main.tests21)) -}
0d8ee6c910d7d75bd6cd4091dd062151
  tests200 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Commands (16 marks)"#) -}
3a01555bf6addffc255987348e4ffa77
  tests201 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests218
                   Main.tests202) -}
8e3c936754db2960ed71bfe2d1ec9b94
  tests202 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests203
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
1d546b6674f1e6837194018ee6feab00
  tests203 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests217
                   Main.tests204
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
51f700b4ae778ace0bfa16ec28c99d79
  tests204 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Float
                   Main.tests209
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqFloat
                   GHC.Float.$fShowFloat
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests208
                   Main.tests205
                   eta2) -}
9d6a645b03d554c293e153f9e18b56c7
  tests205 :: GHC.Types.Float
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ GHC.Types.Float
                   Main.tests206
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Float>_R))) -}
b61074860fe1023829a85069e2c25bff
  tests206 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Float #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 (Lab04.exit04 @ GHC.Types.IO GHC.Base.$fMonadIO Main.tests207)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <GHC.Types.Float>_R)
                   s' }) -}
e9b01b09596f7ed431c36f3978b2fd4a
  tests207 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs,
     Unfolding: ((BinTree.Empty @ GHC.Base.String @ GHC.Types.Float,
                  Main.tests208)) -}
58f63909350e99bd50ba63aa50fd6ef4
  tests208 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 123.45) -}
7d6757c26084e7dc57e874a7c828e33f
  tests209 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests210) -}
c6ed7a13268a7c7e9d0d7aca4bb2f2f2
  tests21 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 0.0) -}
fcd9200d784aa4327819c8d0b719b23a
  tests210 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests211) -}
fff614535c1748f81c0897af7d3826a3
  tests211 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests212
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
f897dd26bc46da9c8bd5b1db51b378db
  tests212 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests213)) -}
0aa43792ad0e6aa18cad6737e26ad2c0
  tests213 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests216
                   Main.tests215
                   Main.tests216
                   Main.tests214) -}
255ed6cc3cfb61caf8106c7cf9f7c1d5
  tests214 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 49) -}
5bbc1ce63d260ba51f196d63bec5088b
  tests215 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 46) -}
db117929189c8bbee7d90d18d150973e
  tests216 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 64) -}
6e35d4400f9b2d8a56d337787b1be2ba
  tests217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Final Result {1 mark}"#) -}
13466926f043120a1eda6bf5f5dc24d0
  tests218 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Exit Result (1 mark)"#) -}
b3dcaee4ac1073caeae890ab07dbe0e7
  tests219 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests252
                   Main.tests220) -}
1613c7a401072653a00c205bc424b6a8
  tests22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "?"#) -}
376ef7f7cf1f65afd2ca9810d93d22ad
  tests220 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests240
                   Main.tests221) -}
bcc8988e60e0ad31d37c0b9091a4920b
  tests221 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests222
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
6e5e8fe4f1f89fc90cfa94c85a45f09c
  tests222 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests239
                   Main.tests223
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
30b324fb9c64208714d0f343e0e8c41e
  tests223 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Bool
                   Main.tests231
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqBool
                   GHC.Show.$fShowBool
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.False
                   Main.tests224 `cast` (Data.Monoid.NTCo:Any[0])
                   eta2) -}
4bcedf0e8c51f83ea3cc927b690739bf
  tests224 :: Data.Monoid.Any
  {- Unfolding: (Main.tests_go Main.tests225) -}
24947152e1d649ec89cac455692b90f6
  tests225 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests226) -}
2b7ce05da3dedaee9c50136d412bd498
  tests226 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests34
                   Main.tests227) -}
8e7beb56dd3507826e42745cf6d42dd5
  tests227 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests32
                   Main.tests228) -}
d8cfee3c45ca01cd625b22db94a53cda
  tests228 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests30
                   Main.tests229) -}
af6b8dcf36ba62b548d8f6729356cbbb
  tests229 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.tests230
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
3f2fefb8ffab480d8d41db1d52511b7f
  tests23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/help.log"#) -}
07881f622051346b28a71e15aa070e6d
  tests230 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_zero"#) -}
52a7ee7260f271b6edef2d203f613a2d
  tests231 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests232) -}
604237472867232d456eaa39885e443f
  tests232 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests233) -}
e1219951e7cebac3e0eeb797b12231ba
  tests233 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests234
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
2b16f245a4bae8d91c66087e34705950
  tests234 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests235)) -}
0318ebd7b630fc21e1a01ef222f07fe8
  tests235 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests238
                   Main.tests237
                   Main.tests238
                   Main.tests236) -}
53c29276c5032b53515b8ff207eac8fd
  tests236 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 66) -}
b52132dfd3fc6e93f04c69fcbea173fd
  tests237 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 63) -}
cb5f4c2cfe5e0945367207335dc67f8a
  tests238 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61) -}
2eab29c57b29e7936a20d436db8b15f6
  tests239 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Stay {1 mark}"#) -}
5fea32175eba351894d1416093f54eb1
  tests24 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests22
                   Main.tests25) -}
854566468cd804efbaa845304acb26df
  tests240 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests251
                   Main.tests241
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
a7bc95896d2fb6725f3789a2c88621df
  tests241 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Bool
                   Main.tests243
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqBool
                   GHC.Show.$fShowBool
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   Main.tests242
                   eta2) -}
754c7a4991bb1d038466bd30acd26b91
  tests242 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString Main.tests33 Lab04.done1) -}
0c8b284e70f6b6c14847163b3c3fb670
  tests243 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests244) -}
45f3df0f56d0a8f78827182fa553edd5
  tests244 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests245) -}
f3d21919e573675833d4030863adf81a
  tests245 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests246
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
ef3b2005f3d9596b650f85c777e29d3b
  tests246 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests247)) -}
04aa09f4bae74ef8419515847b69b509
  tests247 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests250
                   Main.tests249
                   Main.tests250
                   Main.tests248) -}
867ab5eb3a551ab6fac3c138bc678961
  tests248 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 35) -}
770cb5813c293bd14d207f045286ad68
  tests249 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 32) -}
2d8e492a123c7cc5b4d7986da9219a56
  tests25 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests34
                   Main.tests26) -}
7d7f58ef679efdea1c90cc9755516971
  tests250 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60) -}
5890c34bcf9853d61e1685d486f41958
  tests251 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exit {1 mark}"#) -}
553c8cd283cf12f922cb62429828a876
  tests252 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exiting (2 marks)"#) -}
e0bbe8453833fd0d8f5e3820d92fefa7
  tests253 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests272
                   Main.tests254) -}
b47faa02881be1bf266efa1794a45fac
  tests254 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests255
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
778d98fbef7da8c0b9d21858a654d031
  tests255 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests271
                   Main.tests256
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
fa4bdaa6af25e04fe67545e4c54dd791
  tests256 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Types.Char]
                   Main.tests263
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests262
                   Main.tests257
                   eta2) -}
0604a7ceaed1dbc3336025722ac67ff5
  tests257 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.$wunsafeTake
                   @ GHC.Types.Char
                   6
                   Main.tests258) -}
fecdfcef7157274cb2aeaca9779e2411
  tests258 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.dropWhile
                   @ GHC.Types.Char
                   Main.tests261
                   Main.tests259) -}
ebbaf6d2fe4bf76d9f93dc4755b757c7
  tests259 :: GHC.Base.String
  {- Unfolding: (Main.tests260 (GHC.Types.[] @ GHC.Types.Char)) -}
5a885031be53cc7c80389bff32939361
  tests26 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests33
                   Main.tests27) -}
1691a31d29f08dddd32a9ced731171a0
  tests260 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat1
                   GHC.Float.$fShowFloat_$sshowFloat
                   GHC.Show.shows18
                   __float 123.45) -}
56c00bfeddaf23b0759ef0ec30eda7be
  tests261 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ x :: GHC.Types.Char ->
                 case x of wild { GHC.Types.C# c# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leWord#
                           (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48))
                           __word 9) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
40b153c648070a3b7978ba01e137fc1a
  tests262 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "123.45"#) -}
41df74f45d58b968c61f98ac6d2478eb
  tests263 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests264) -}
5874ea4286ff984151874b01ecf047a5
  tests264 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests265) -}
50e53b4b19540cc07c9b4cb9517304fa
  tests265 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests266
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
a00adc2c1fd7849c2fec19b8f780844c
  tests266 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests267)) -}
23adb8cf72f6a3df291a23ff67a2e083
  tests267 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests270
                   Main.tests269
                   Main.tests270
                   Main.tests268) -}
69259fc0988a04ecdeff8e25b75bed38
  tests268 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 81) -}
bf0cde6315cf832ed70338665826efce
  tests269 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 78) -}
508dd7f79ae805e83df6ad6584a4b222
  tests27 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests32
                   Main.tests28) -}
6ca18ac046c8a035c09f3b35e2665a0a
  tests270 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58) -}
5a362a959f7abc6e4ba150da3779f1b5
  tests271 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prompt {1 mark}"#) -}
8935ced840ad7b8861cac2c5854763ce
  tests272 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prompting (1 mark)"#) -}
ccc09a70be88ad2a18d0d8a019431b36
  tests273 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests506
                   Main.tests274) -}
f6c4692ac2f273ee5f00217ea7c2459a
  tests274 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests496
                   Main.tests275) -}
78de8b2b4d65da70e859fc9b19b4465f
  tests275 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests486
                   Main.tests276) -}
1cfa1cebce1731e0d7647e3ce8a8f305
  tests276 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests475
                   Main.tests277) -}
9bf5466d0376a94738586886c1b8da91
  tests277 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests465
                   Main.tests278) -}
6b2af9be89ce9a5627c2e658d3c5825f
  tests278 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests453
                   Main.tests279) -}
cb1740a1d122e1123abc5de88c2e85af
  tests279 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests442
                   Main.tests280) -}
af86e42a58a25400b7028126f7a7137a
  tests28 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests31
                   Main.tests29) -}
da34dc4aa4761b5b0594d0e263c762a2
  tests280 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests431
                   Main.tests281) -}
26f79d0591169d579139f4cad7ba83a6
  tests281 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests420
                   Main.tests282) -}
c87795265e924479e8c61b2c004653da
  tests282 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests409
                   Main.tests283) -}
4f2d57d61a37cf2517f4972fab64b2a8
  tests283 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests393
                   Main.tests284) -}
994f986a0b3270d8c062e79fc2c81c74
  tests284 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests384
                   Main.tests285) -}
1006b79eff312a91197f69aad187e02e
  tests285 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests373
                   Main.tests286) -}
dfd16aaa1ea6afa251fd3132eaf0c576
  tests286 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests361
                   Main.tests287) -}
bf9c0adda1b646e50dd62a7287e969f4
  tests287 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests347
                   Main.tests288) -}
b3cd4c1642a8ec6d694f390e2f7dab59
  tests288 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests335
                   Main.tests289) -}
217b62db600ad745da088b2f6c169bb4
  tests289 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests322
                   Main.tests290) -}
d0393d4819c1e91fab6fcca2838e5af3
  tests29 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests30
                   (GHC.Types.[] @ GHC.Base.String)) -}
3132aaf14d09d2513b066c167cf30f71
  tests290 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests307
                   Main.tests291) -}
0d9a8049f6eeeb9de493c7860d224b61
  tests291 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests292
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
1c055690ec7d0e11032761c16b8db72d
  tests292 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests306
                   Main.tests293
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
522f1684f7d972b4a9b5dad4dedaf1b5
  tests293 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests298
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests296
                   Main.tests294
                   eta2) -}
3bdbca0feda354012df86e6d30fa1ff7
  tests294 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests295
                   BinTree.ins4) -}
f4ce0e6eb2aeebb90951a4d6b4c7888d
  tests295 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'c') -}
26d7169e4396a3df64d672b979c4fa5f
  tests296 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.tests297) -}
033186766df7b3cc4f75265142b242a4
  tests297 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 99) -}
7775be5465751706f8c915f8e91c8220
  tests298 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests299) -}
99f7298f70d41cc50a875f24b0da170f
  tests299 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests300) -}
47a0436c434a836c3a4de89b9d805fb2
  tests3 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests201
                   Main.tests4) -}
19b9686689179e519526fa681e1fdeef
  tests30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "remove"#) -}
25efb70262ef3f4dfa621022b376f128
  tests300 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests301
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
8225d78dc9fc21bee47741ac97dc9ace
  tests301 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests302)) -}
6d10062409b2f115f82f142f2c7ba6fe
  tests302 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests305
                   Main.tests304
                   Main.tests305
                   Main.tests303) -}
ebe5622d97f5db8f2f37b01fcedd9327
  tests303 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 44) -}
cf9ff74a15ac00265f9dea8524a4f361
  tests304 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41) -}
b88eb89cf77f2a404300aaffbe6c6f92
  tests305 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 54) -}
d8b457c5a3a29876f6dbbd5fe6632fd0
  tests306 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lookup Branch {R}"#) -}
dcc6ae371c16dd34cd5a823eccc0f025
  tests307 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests321
                   Main.tests308
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
c4b6701c3788ab1f331b9baab40e93fe
  tests308 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests313
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests311
                   Main.tests309
                   eta2) -}
4f59cfa5773b52c1b16f6702db9fc372
  tests309 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests310
                   BinTree.leaf_b2) -}
35d9de676335773f9ee6e3832add7238
  tests31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "list"#) -}
5db3e6993ed7cce7accc80c8876b0a75
  tests310 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'b') -}
273fac7bc050cc25bf26bf9dd5b6e7ca
  tests311 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just @ GHC.Types.Int Main.tests312) -}
93d1e60faac85454399d57084f509fc6
  tests312 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2) -}
e212472fc3f846c3a88502e0463cb54b
  tests313 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests314) -}
a16500a5d2580380a629791c44a7cd55
  tests314 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests315) -}
e95525ec678ac2c0badc95e67022546c
  tests315 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests316
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
0cd6e5142cbb8e9f443a68d24aae6b30
  tests316 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests317)) -}
6217d9722ae5b2f3d80aea81abec7e39
  tests317 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests320
                   Main.tests319
                   Main.tests320
                   Main.tests318) -}
048cd88781443588dad063941c2edd0b
  tests318 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 48) -}
0f4187b39356d38e2e5ef5303703d2d3
  tests319 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 45) -}
996cfb240d33c8f82a21ea00c2b8ef76
  tests32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "fix"#) -}
09512ee4d1110e6a768e15515617d301
  tests320 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 53) -}
cbcb8afe2029f74b9dbb0f8d58aae8ec
  tests321 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Lookup Leaf (Ok) {R}"#) -}
46d4436db430a75b59c844f257e8dd6f
  tests322 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests334
                   Main.tests323
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
181fe85b94b9707cd8468827490bccbf
  tests323 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests326
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Main.tests324
                   eta2) -}
4e919240cf2474eaa4d6bd0573ef4825
  tests324 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests325
                   BinTree.leaf_b2) -}
99359df15fcf2d6d34d4bede77f94788
  tests325 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'a') -}
7e499e0c8112dc512fd7d7fac7ce8664
  tests326 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests327) -}
a4b23d0d587a5e242a25812fdaa15aea
  tests327 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests328) -}
a38fce0ecf7147a05baf0c7ee15a4ca4
  tests328 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests329
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
0ab4260fc9ac9919848e4731da024c13
  tests329 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests330)) -}
463e6408e386032aa951349710150abb
  tests33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "exit"#) -}
df030fed3678c1c52a29951d7f4efdcb
  tests330 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests333
                   Main.tests332
                   Main.tests333
                   Main.tests331) -}
e06ed0c75d5ce41e714bc3398e1037cf
  tests331 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 50) -}
e240b2905d19640623db9178a483bb6c
  tests332 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 47) -}
9e3364aa7183e51f90c746a843d9ed53
  tests333 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 52) -}
de849111127b0d7c92ddd6689a26ef56
  tests334 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Lookup Leaf (Fail) {R}"#) -}
3131d20d9b91be72eab5cde3482b4c9e
  tests335 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests346
                   Main.tests336
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
894767782d3eebef8cd68fdb00ef01e2
  tests336 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   Main.tests338
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Main.tests337
                   eta2) -}
a453f660429df15bb858d631ce81267e
  tests337 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (BinTree.treeLookup
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdChar
                   Main.tests325
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
00ae29df9ab05b79a3970020b9ee91c8
  tests338 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests339) -}
f25ba5e758b94934c32354c420ebf3fd
  tests339 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests340) -}
1729c88e4a6939347a1cbf43de3a14b6
  tests34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "add"#) -}
76646b1d167974df7f68fa3c987b683c
  tests340 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests341
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
f52c4f90d8689714ce74740cffb90452
  tests341 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests342)) -}
0ba5d70ebfc86e93d26efe4c107ef529
  tests342 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests345
                   Main.tests344
                   Main.tests345
                   Main.tests343) -}
6848ce935c70dd474573824ccc30bdeb
  tests343 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 42) -}
2c37dcdeacc5cb3a4e2f6f3f8218a32b
  tests344 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 39) -}
19e19fe3b42e256faf56732fbd5e8565
  tests345 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 51) -}
42f9ed963a1e9dab6a08d4e1fa78e3c6
  tests346 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Lookup Empty {R}"#) -}
c9211b873a9b4b2fb7401a19e6cd9e72
  tests347 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests360
                   Main.tests348
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
b65bfc4ebae3e87ad01f01ce9b7c444e
  tests348 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests354
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests349
                   BinTree.ins4
                   eta2) -}
50b3ee11398bcc2f3a59a6eb2b314399
  tests349 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests352
                   Main.tests351
                   Main.tests350
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
87f5bdb0cfcd9421fae30e021692dc83
  tests35 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests36) -}
b7361e332fd573748b4b8fc16ceb1180
  tests350 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4) -}
cd327cbac3f7778f46c266cd0a033327
  tests351 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'd') -}
667748ec63ccaa23ca4d0fe74819057d
  tests352 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)
                   Main.tests310
                   Main.tests312
                   Main.tests353) -}
657ee818ff83815faed092c5a3d2adc8
  tests353 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Leaf
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests295
                   Main.tests297) -}
be2ee405ae4b7734ce5f1ec3b833bc4b
  tests354 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests355) -}
aa1d5fc65431530d5c0db37f8dd847d1
  tests355 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests356) -}
b9224b672a745176562940b503cc8326
  tests356 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests357
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
94659e14105d836222f524bdeec5fe38
  tests357 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests358)) -}
6ddec8eebd4bcc5419a11892787a2299
  tests358 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests214
                   Main.tests359
                   Main.tests214
                   Main.tests249) -}
b894b607ea496c3219672081a9d9a98d
  tests359 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 29) -}
3bb1917d3c6ca4cb873b7f76c7e46593
  tests36 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests37) -}
b185d17b199460393e0b6abbb8d7bd78
  tests360 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Insert Branch (Old) {R}"#) -}
fa45d507b207c04703c405027227ba63
  tests361 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests372
                   Main.tests362
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
87635009d53231b78fbf4297e8b30dd5
  tests362 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests367
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests363
                   BinTree.ins3
                   eta2) -}
07611bcc1d409f43d4cd849f8516bce1
  tests363 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests364
                   Main.tests351
                   Main.tests350
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
ed5f50be70e02db20a156eada033a528
  tests364 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)
                   Main.tests310
                   Main.tests312
                   Main.tests365) -}
ebc069a849204335a529c6a6d2282f2c
  tests365 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Leaf
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests295
                   Main.tests366) -}
963edffc7bef9278136614498aeabb0e
  tests366 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 3) -}
3c5d77ca6025ae6ebe381fab4776fd61
  tests367 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests368) -}
b51081673051d1bf6f266aac882e2ab2
  tests368 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests369) -}
783e1e94950cf809290335e3fe790fe0
  tests369 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests370
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
c6e0155320a2f972b44ed3274536ca2a
  tests37 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests38
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
17bb1bf3324c6d11f0a00ed153585477
  tests370 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests371)) -}
7d0f52e235177d2ab49022dff705d6e4
  tests371 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests318
                   Main.tests359
                   Main.tests318
                   Main.tests249) -}
4f3fb7eb8b7f4a6f9f778ef91fdeefae
  tests372 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Insert Branch (New) {R}"#) -}
b86ec98458b9376cbd4923505c7911fa
  tests373 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests383
                   Main.tests374
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
52af77366d444b0656444435974362ee
  tests374 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests376
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests375
                   BinTree.ins2
                   eta2) -}
f9ae0234a6fc1da79a9c19ab000e8b9c
  tests375 :: BinTree.BinTree GHC.Types.Char GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Main.tests365
                   Main.tests351
                   Main.tests350
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
1f2edff426989ca8d89adaa683939454
  tests376 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests377) -}
563feed83b6afb7cf4f0c918c4dd732d
  tests377 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests378) -}
7410ec5ea603cbe46f2809936e1c8cd5
  tests378 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests379
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
4e740dd7df5a6e93bf5581ef3dc5b56d
  tests379 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests380)) -}
43f570b6934241383a32fbda2665ae65
  tests38 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests39)) -}
f52a7f7131906363dbc1c7a35c48f2ef
  tests380 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests332
                   Main.tests382
                   Main.tests332
                   Main.tests381) -}
a7cee571aebbd95e6aaa9aaf5b84088a
  tests381 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 30) -}
a89f90ceeb0726b0daad21d987e80e84
  tests382 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27) -}
c3b4068d6c86e2f324b1be8f58a2b2a8
  tests383 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Insert Leaf {R}"#) -}
c93a57b563a026c0acc0f5a1e5135c06
  tests384 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests392
                   Main.tests385
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
36a6433273897af6d47a26f455a2315e
  tests385 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Char GHC.Types.Int)
                   Main.tests386
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree4
                   Main.$s$fShowBinTree6
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests365
                   BinTree.ins1
                   eta2) -}
7266154e21d5f510429ad0ae4e12fb29
  tests386 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests387) -}
50214a381dd5b6e23bdecee3d2cba0d6
  tests387 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests388) -}
e595d88e71e62b6fcea5bbecbc20e83c
  tests388 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests389
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
5db96bb9b398d94aaa6f46c2deeb038f
  tests389 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests390)) -}
8e25abd9fbeb14eaee8d577bd51c3f25
  tests39 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests42
                   Main.tests41
                   Main.tests42
                   Main.tests40) -}
c308e70ae2d3f520129c34644c22bdce
  tests390 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests215
                   Main.tests391
                   Main.tests215
                   Main.tests359) -}
184d32a22bae763733bb4c37b06ef6f4
  tests391 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 26) -}
3099c6920bb4c23b4d9adf526bbf8676
  tests392 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Insert Empty {R}"#) -}
4eb24ecdc02bec699ba57ca72c01c1fd
  tests393 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests408
                   Main.tests394
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
78fee3f039b25ae41407c44a79d19240
  tests394 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int [GHC.Types.Int])
                   Main.tests400
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree
                   Main.$s$fShowBinTree
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests399
                   Main.tests395
                   eta2) -}
41a228bedeafc59ce9f81137b76bf079
  tests395 :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
  {- Unfolding: (BinTree.treeMap
                   @ ()
                   @ GHC.Types.Int
                   @ ()
                   @ [GHC.Types.Int]
                   Main.tests397
                   Main.tests396
                   BinTree.emptyX4) -}
8717c569b721fec01c4a3486251fcf29
  tests396 :: () -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: () -> GHC.Types.[] @ GHC.Types.Int) -}
237432234755e7506f04739ebbfdeb6f
  tests397 :: () -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: () -> Main.tests398) -}
d2735b5f6ae99701e2f591c7409973af
  tests398 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
579e7b12b4ecbccfe6ee888733c22c43
  tests399 :: BinTree.BinTree GHC.Types.Int [GHC.Types.Int]
  {- HasNoCafRefs,
     Unfolding: (BinTree.Branch
                   @ GHC.Types.Int
                   @ [GHC.Types.Int]
                   (Main.tests_nullX2 @ GHC.Types.Int)
                   Main.tests398
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Main.tests_nullX2 @ GHC.Types.Int)) -}
e3769d62529a1a46c5f34a96315b33ee
  tests4 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests5
                   (GHC.Types.[] @ Test.Framework.Core.Test)) -}
79777c794ad5e1ca20290bea0b14935f
  tests40 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
674a272bdd46549a5b6486034d7af945
  tests400 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests401) -}
15dae8bde1254491104bb9c4c6dae1fa
  tests401 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests402) -}
c4067fbc29211e92486481939590e0ef
  tests402 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests403
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
d8612a8967925d8c73435d31db381c79
  tests403 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests404)) -}
30bf883858e6d3017d9a4115488953ff
  tests404 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests407
                   Main.tests406
                   Main.tests407
                   Main.tests405) -}
b1df272e6b7f4ac2481c51e46e2bfec9
  tests405 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8) -}
06b373aff3352a04c9c3e825023263af
  tests406 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5) -}
f57740357081e41fc9fd68e39fb04d0d
  tests407 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 40) -}
31df8ed0a22d007b2ec18db80a741dfe
  tests408 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Branch {R}"#) -}
2bc7cd9c806f2117b3e3f0472eaa77e2
  tests409 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests419
                   Main.tests410
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
018cc7caae3bbe119583b777709f11b1
  tests41 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 7) -}
ab5e76017ab82bdb05e86e74f572b60a
  tests410 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                   Main.tests412
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree2
                   Main.$s$fShowBinTree3
                   (GHC.Types.[] @ GHC.Types.Char)
                   BinTree.leaf_2b
                   Main.tests411
                   eta2) -}
61658a0b2c99bad57dccea29d1616601
  tests411 :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
  {- Unfolding: (BinTree.treeMap
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   BinTree.alphaOrd
                   BinTree.alphaChr
                   BinTree.leaf_b2) -}
1fb2ac18e284595ed4e995d58bdbc263
  tests412 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests413) -}
3898b0e8f489b2a34ff1fb97f9699e2a
  tests413 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests414) -}
8c3141d8b1e0d27da43411eb6f197fbd
  tests414 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests415
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
6ce1f78f37645c908c6e517da44fe46e
  tests415 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests416)) -}
ad78f96315a7983194bb8d36170d1f8f
  tests416 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests418
                   Main.tests320
                   Main.tests418
                   Main.tests417) -}
5dac93290905e54cca9a735f61929223
  tests417 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56) -}
d6444cfb77cfc5158b09e912bfd18b86
  tests418 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 37) -}
66d10f960e6b120625a62de4bbf86dc7
  tests419 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Leaf {R}"#) -}
3cb3f2dbf29ee468b1ce1f404cbda719
  tests42 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 167) -}
a10b8cd9ee7e54845d2639df45e53d81
  tests420 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests430
                   Main.tests421
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
401c3b488bf526a2c9cd5f7034e23d2f
  tests421 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Types.Int GHC.Types.Char)
                   Main.tests423
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqBinTree2
                   Main.$s$fShowBinTree3
                   (GHC.Types.[] @ GHC.Types.Char)
                   (BinTree.Empty @ GHC.Types.Int @ GHC.Types.Char)
                   Main.tests422
                   eta2) -}
4434880df5c37d78be2fab1a6fd91016
  tests422 :: BinTree.BinTree GHC.Types.Int GHC.Types.Char
  {- Unfolding: (BinTree.treeMap
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Base.ord
                   GHC.Char.chr
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
ca799fa29a72a8c02a177bb2417a1f36
  tests423 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests424) -}
085697e85f29c38555f26e4d3c60a7bc
  tests424 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests425) -}
270a8f770531e80955db6fadc3d02684
  tests425 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests426
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
0b12a6ee01faa44b9efbfa5615ebf537
  tests426 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests427)) -}
15c47eb7be609606835c36e2959b5df2
  tests427 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests429
                   Main.tests407
                   Main.tests429
                   Main.tests428) -}
1781974869e6bdf3dc546c3b40cb4aea
  tests428 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 43) -}
4e84c8bb4eaf00c66ac7350a8246912e
  tests429 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 36) -}
9ac73bf1b92f50e8cfe0477fdd923ba6
  tests43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test\\Main.hs"#) -}
afcb6dc6328e9cf92a45c711c4684590
  tests430 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Map Empty {R}"#) -}
ed8a2971b35b10e3701869b4808b525c
  tests431 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests441
                   Main.tests432
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
287e4e522ae80bb571827b2109891ab2
  tests432 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests435
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests434
                   Main.tests433
                   eta2) -}
dde28976440183307791a1441d32127c
  tests433 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ ()
                   @ ()
                   GHC.Show.$fShow()
                   GHC.Show.$fShow()
                   GHC.Types.False
                   BinTree.emptyX4) -}
a746ca2b05ca8e117987a39379a61ecb
  tests434 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch (Branch Empty () () Empty) () () (Branch Empty () () Empty)"#) -}
4730c624f7a48e75eb279c8aa8924278
  tests435 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests436) -}
ad498af8b9e9e2cbf00fcdc5dc1e4e52
  tests436 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests437) -}
d66f639f12a37ee340343c29f9b681c5
  tests437 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests438
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
67198e9541a3f81d144d87c79330e589
  tests438 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests439)) -}
81fb38f6281e752579d6afdd0939b7d2
  tests439 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests440
                   Main.tests350
                   Main.tests440
                   Main.tests41) -}
f2808779fa0c36261af21481684ce615
  tests44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
9ffd7d769b888d9b163b0d0550b01c74
  tests440 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33) -}
d967257305d9bfac8de4592275eecb0a
  tests441 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Empty X 4 {R}"#) -}
86921fa7a13325e3f588e5f17fda2aff
  tests442 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests452
                   Main.tests443
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
54e959e0a19b3dfe664f13f0257de64e
  tests443 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests446
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests445
                   Main.tests444
                   eta2) -}
606560e6522c727cae0f8f981bb2dd13
  tests444 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_right_a1_b2) -}
d499a1cda2a054c26c3a99ac479fb036
  tests445 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch Empty 'a' 1 (Leaf 'b' 2)"#) -}
634e63e911de17d28891d7f13fbf83b4
  tests446 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests447) -}
1c5ec79057ee8c34b3878369941e9cf5
  tests447 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests448) -}
6b245f0aec56b4351aa7181a8abe764e
  tests448 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests449
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
b4a0cefbb35ff80889d87b2a3630c571
  tests449 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests450)) -}
8d052693338c959d2ab29d9a4e058236
  tests45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
bad30b06e5603a05317b51e801a5ae61
  tests450 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests381
                   Main.tests451
                   Main.tests381
                   Main.tests382) -}
462fcb7bb0b7c6599ec06640102f167a
  tests451 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 24) -}
162ff6848e8d927299a26fd7ca3863d8
  tests452 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Right a 1 b 2 {R}"#) -}
bef08d6297e87ab88ca7d45600db0fe2
  tests453 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests464
                   Main.tests454
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
f007cf226b0e463544976d43ace2ecb1
  tests454 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests457
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests456
                   Main.tests455
                   eta2) -}
08c05c1ef06fcfdf08cdfbcd424b34e1
  tests455 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_left_a1_b2) -}
c4c860498425a696c621d6d19d735f52
  tests456 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch (Leaf 'a' 1) 'b' 2 Empty"#) -}
fe988da6a6f132f627a1fe3790da4014
  tests457 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests458) -}
1a4b2b78ef6685c38f145d5d231b4026
  tests458 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests459) -}
740b67e3a936f1e3b49e30e72651ec04
  tests459 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests460
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
bf2999b2aea9f6d292f68e38966319b4
  tests46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "@?="#) -}
9b4baf770ee5a12ddb9b8ff2ee85259b
  tests460 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests461)) -}
20787990e844ee673090548b5f3311fd
  tests461 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests463
                   Main.tests462
                   Main.tests463
                   Main.tests391) -}
22d43c49959594cdf6249d719ce66fb6
  tests462 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 23) -}
f491e22bdabee044e09c3d37d670a063
  tests463 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 28) -}
9769a45281bd39fe9f34566217065ea4
  tests464 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Left a 1 b 2 {R}"#) -}
f0beb8696b32654ba715e56c7e99a9e8
  tests465 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests474
                   Main.tests466
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
2fec8db726c2a7637b39349731a2d1d9
  tests466 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests469
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests468
                   Main.tests467
                   eta2) -}
8ca15977a0485d75d22c69c1d6d603e0
  tests467 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.br_emp_a1) -}
f16a7b5b2a8ced70f6736b7aa676e350
  tests468 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Branch Empty 'a' 1 Empty"#) -}
d70e29266b6017584c1e718fcad8a9e4
  tests469 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests470) -}
b7a83d83a7778b04cd34bd899476a7fe
  tests47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Help Listing {2 marks}"#) -}
c6e99f5e3b5af1d5a7a297cc6984c0e4
  tests470 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests471) -}
1067f74089b71de70c7e46a7321a4956
  tests471 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests472
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
8d4bc4f04ee5e1cff8fa6c91e3f5d752
  tests472 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests473)) -}
16d8f5ee457f00333fbd8cee7e67cc4f
  tests473 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests391
                   Main.tests407
                   Main.tests391
                   Main.tests428) -}
62e9b6a80cc35543c03f793dfcd1704f
  tests474 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Show Br Empty a 1 {R}"#) -}
b5bb2c75b2fef8c0fbda9db25465b199
  tests475 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests485
                   Main.tests476
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
e46f4acbd6f6b4119effeac056751a88
  tests476 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests479
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests478
                   Main.tests477
                   eta2) -}
a823eccb00381072f21807e278431a8c
  tests477 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Int
                   @ GHC.Types.Char
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowChar
                   GHC.Types.False
                   BinTree.leaf_1a) -}
275f5a86ce8befbfcc63654ba75866fc
  tests478 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Leaf 1 'a'"#) -}
65f5396364fa1f297f4f8f18e7638377
  tests479 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests480) -}
470d1bb376b63e5c18744ede9e013423
  tests48 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests77
                   Main.tests49
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
4a535047687deaa4a8acb53f3eea11c9
  tests480 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests481) -}
dc87370ab6dd5c67245d485d55bc3097
  tests481 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests482
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
9c65612e5e0519d4487974e6fd948fe2
  tests482 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests483)) -}
b91e16ff46931a3e2fb98cc63906111c
  tests483 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests484
                   Main.tests429
                   Main.tests484
                   Main.tests344) -}
d9786ce8221b9627ecbb6cb19f1e6bca
  tests484 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 25) -}
7b04d1afb7a60b6a40be5d79fd058bb1
  tests485 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Leaf 1 a {R}"#) -}
13a50e25b05c485940cb32bb0e4bfe54
  tests486 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests495
                   Main.tests487
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
422533c510ad1b0c46f147e57089393c
  tests487 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests490
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests489
                   Main.tests488
                   eta2) -}
4f25d9ad2cc14283a04d05d7d1b4c0a7
  tests488 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   BinTree.leaf_a1) -}
f446161bd6cdc8726e98690ed5f9e138
  tests489 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Leaf 'a' 1"#) -}
4c4edd04acbc948dee5963ee800873ce
  tests49 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ [GHC.Base.String]
                   Main.tests71
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]2
                   GHC.Show.$fShow[]_$s$fShow[]2
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests64
                   Main.tests50
                   eta2) -}
c7c3cf0f2a0ddf27ea05d01981745277
  tests490 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests491) -}
847ffc537a91f9dde79462778ffda194
  tests491 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests492) -}
e376d2e8e67ce5a75f9dea472c1c584b
  tests492 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests493
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
e642da8e1e2edd9b457ee5efa2502fda
  tests493 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests494)) -}
465a2f15161cabf5b2ecdd93c79d693f
  tests494 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests451
                   Main.tests429
                   Main.tests451
                   Main.tests344) -}
21afe38b09d0475b990aeb5dbf91cf0f
  tests495 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Leaf a 1 {R}"#) -}
42d51b46e6f06bf8dd7deac03ec01c29
  tests496 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests505
                   Main.tests497
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
d8907d0bf3e8a62827715b112bd899a7
  tests497 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Base.String
                   Main.tests500
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   GHC.Show.$fShow[]_$s$fShow[]1
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests499
                   Main.tests498
                   eta2) -}
4da2c2d1a1ab582635da5bdbee1bf95d
  tests498 :: GHC.Base.String
  {- Unfolding: (BinTree.treeShow
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   GHC.Show.$fShowChar
                   GHC.Show.$fShowInt
                   GHC.Types.False
                   (BinTree.Empty @ GHC.Types.Char @ GHC.Types.Int)) -}
594e4ab4324741e2ea5fe6cfdde7fb8e
  tests499 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
6ae1afcf3f53096e7c40d3956a0537c4
  tests5 :: Test.Framework.Core.Test
  {- Strictness: m2,
     Unfolding: (Test.Framework.Core.TestGroup
                   Main.tests200
                   Main.tests6) -}
8faaa1421b9c613501a303aeb27c4051
  tests50 :: [GHC.Base.String]
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ [GHC.Base.String]
                   Main.tests51
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <[GHC.Base.String]>_R))) -}
45d5de59569499453e44b07a5c619256
  tests500 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests501) -}
b56b0876bbf28705f0b7784652deccb4
  tests501 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests502) -}
c9a1b2e18c1147d861aff9f02a8d024c
  tests502 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests503
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
16793614693606421a2c448853dff95a
  tests503 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests504)) -}
8b3bd481f35f61c6917d8c93c45ec7ee
  tests504 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests462
                   Main.tests440
                   Main.tests462
                   Main.tests429) -}
f751f77132d71b5e4f9da0bc6d03da0e
  tests505 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Show Empty {R}"#) -}
79b1774e3a1a35b4e8d599e4d202909b
  tests506 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \REGRESSION TESTS (not marked)"#) -}
53e4fe2a054c0ee1c224263f293d2087
  tests51 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests63
                        GHC.IO.IOMode.WriteMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case Lab04.execute1
                        GHC.IO.Handle.FD.stdin
                        ipv1
                        Main.tests31
                        Main.tests52
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests63
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, Data.OldList.lines ipv9 #) } } } } } }) -}
95e9756c409b7b262de70379c94ca0bb
  tests52 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests54, Main.tests53)) -}
062ca8afca16da9566cf92ca5280611f
  tests53 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 15001.0) -}
588c97588ebe3db86d37502b8a3ca109
  tests54 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests60
                   Main.tests59
                   Main.tests58
                   Main.tests55) -}
c632cc2f7b1c9ac6844c3d4c3b37dc57
  tests55 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests57
                   Main.tests56) -}
97a768a2171346eae32cf7d1e7e21e03
  tests56 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 15000.0) -}
f1f43dc5cd345c48a51cedfefb48bfa1
  tests57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "home"#) -}
460bc239441c5efcb13f32f620318f8d
  tests58 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 1000.0) -}
2e7a0a6edd89c1a3f6669eff8e3aed07
  tests59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "gold"#) -}
3d8e9e9a8ff8253fa9a83583206e0e2a
  tests6 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests187
                   Main.tests7) -}
cd00ca31edda7600477a4dcfe78d541d
  tests60 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests62
                   Main.tests61) -}
93639327cf56472440946d997b938a7f
  tests61 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 1.0) -}
5f7acef03839abc0db707f392106e119
  tests62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "banana"#) -}
2da18897b5a8bd100fcd56b225abfc28
  tests63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/list_ghb.log"#) -}
497306def5a3f43ec95fb6b02f887365
  tests64 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests70
                   Main.tests65) -}
d9def51e694ce48173a6600c84b7e4f4
  tests65 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests69
                   Main.tests66) -}
425b1f9e2b2a46cb8aeb5e40b074e54f
  tests66 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.tests68
                   Main.tests67) -}
229a3fcbf93df006a6b1ac8f809e6317
  tests67 :: [GHC.Base.String]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Base.String)) -}
ff977b7d18cc3459e3bddaf689f5b203
  tests68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "home 15000.0"#) -}
fc44c041e50df75bdba204911d178ce9
  tests69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "gold 1000.0"#) -}
0d49a58aefa4f82456b5c95659bd1b0b
  tests7 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests175
                   Main.tests8) -}
b3e6dcadd652847d6f3a4a0ba949de2f
  tests70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "banana 1.0"#) -}
9520bcac9d99309aab179f9415da1100
  tests71 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests72) -}
6e4208e69962199ed1e1d28eddd1ec8a
  tests72 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests73) -}
490e0a844b6d4a343793b4ba504f255e
  tests73 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests74
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
072c324b61825a6809a773b10d575d43
  tests74 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests75)) -}
d5cec04e0593fc6cebb4a38179deed5e
  tests75 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests76
                   Main.tests41
                   Main.tests76
                   Main.tests40) -}
d85ac226b1efad863497930217881101
  tests76 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 158) -}
173b186e596881e8e8781db96a09b6fd
  tests77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "List (b,g,h) {2 marks}"#) -}
bb19dc2836b884a1e1bbb8853617d80b
  tests78 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests98
                   Main.tests79
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
16b0b8e5cc12bc6f705b02970d887fcf
  tests79 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests92
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEq(,)
                   Main.$s$fShow(,)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.tests89
                   Main.tests80
                   eta2) -}
78f494ecf5e9a5921476a54b712cc3c0
  tests8 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests161
                   Main.tests9) -}
cc7b6d7a469cfd6f25d1951b642dd1a0
  tests80 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (GHC.IO.unsafeDupablePerformIO
                   @ (BinTree.BinTree GHC.Base.String GHC.Types.Float,
                      GHC.Types.Float)
                   Main.tests81
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <(BinTree.BinTree GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)>_R))) -}
3c57e152e065a9061a7a3e09b0636a1d
  tests81 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (BinTree.BinTree GHC.Base.String GHC.Types.Float,
           GHC.Types.Float) #)
  {- Arity: 1,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests88
                        GHC.IO.IOMode.ReadMode
                        s' of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.tests87
                        GHC.IO.IOMode.AppendMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Lab04.execute1
                        ipv1
                        ipv3
                        Main.tests30
                        Main.tests82
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.hClose1 ipv3 ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8, ipv5 #) } } } } } }) -}
6dd8b8c588aab6de68fd5fe93f468369
  tests82 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests84, Main.tests83)) -}
7ec8807ec50281d29d2acf7d71318f64
  tests83 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 101.0) -}
19cc429b28891c6d1857368212a78746
  tests84 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests62
                   Main.tests61
                   Main.tests85) -}
68ef632114a5c5663071846328cdf2bb
  tests85 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests86) -}
64be7889150be6bd79c8991b43424886
  tests86 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 100.0) -}
0372c5aa9a38614794612bc05ea4617e
  tests87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/tests.log"#) -}
1b11e29f4bf28650663897e742f4cef4
  tests88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/remove_gold.txt"#) -}
e7a3fdde7271c09875af734fbe674756
  tests89 ::
    (BinTree.BinTree GHC.Base.String GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: ((Main.tests90, Main.tests61)) -}
6fa0d97985d7a6dafd560ad4ee7bf48a
  tests9 :: [Test.Framework.Core.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Framework.Core.Test
                   Main.tests148
                   Main.tests10) -}
9fbcfb03dd81f24d4d311431b117b824
  tests90 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Branch
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   (BinTree.Empty @ GHC.Base.String @ GHC.Types.Float)
                   Main.tests62
                   Main.tests61
                   Main.tests91) -}
3033a6c039b7dd64ef8e69329ed84fd0
  tests91 :: BinTree.BinTree GHC.Base.String GHC.Types.Float
  {- Unfolding: (BinTree.Leaf
                   @ GHC.Base.String
                   @ GHC.Types.Float
                   Main.tests59
                   Main.tests21) -}
ceca4e2834da99ad5ac11a1e6b022387
  tests92 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.tests93) -}
25539de527f978783c75364a5e2e5974
  tests93 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@?=2
                   Main.tests94) -}
9ef473ae307255c176231d51514d501d
  tests94 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.tests95
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
0a24f334746f79c74f450958a47679af
  tests95 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.tests46, Main.tests96)) -}
0df34536c8043d2661c65759edecc4a7
  tests96 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.tests45
                   Main.tests44
                   Main.tests43
                   Main.tests97
                   Main.tests41
                   Main.tests97
                   Main.tests40) -}
e2fa61d691142b9dc66decb9fcd9db3d
  tests97 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 145) -}
498ce00ca2b79b35ea94361a1d57ac17
  tests98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Remove Branch {2 marks}"#) -}
bca03d8594299a28ce2845b65351ea04
  tests99 :: Test.Framework.Core.Test
  {- Unfolding: (Test.Framework.Core.Test
                   @ Test.Framework.Providers.HUnit.TestCaseRunning
                   @ Test.Framework.Providers.HUnit.TestCaseResult
                   @ Test.Framework.Providers.HUnit.TestCase
                   Test.Framework.Providers.HUnit.$fTestlikeTestCaseRunningTestCaseResultTestCase
                   Test.Framework.Providers.HUnit.testCase1
                     `cast`
                   (Sym (Data.Typeable.Internal.NTCo:Typeable[0]
                             <*>_N <Test.Framework.Providers.HUnit.TestCase>_N))
                   Main.tests112
                   Main.tests100
                     `cast`
                   (Trans
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        (Sym (Test.Framework.Providers.HUnit.NTCo:TestCase[0])))) -}
93a3f180a8892fe5a71ac9806bf31a7a
  tests_go :: [[GHC.Types.Char]] -> Data.Monoid.Any
  {- Arity: 1, Strictness: <S,1*U> -}
3e3e67a040c6bcfb74f326df7fd1a7bf
  tests_nullX2 :: BinTree.BinTree GHC.Types.Int [t]
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (\ @ t ->
                 BinTree.Branch
                   @ GHC.Types.Int
                   @ [t]
                   (BinTree.Empty @ GHC.Types.Int @ [t])
                   Main.tests398
                   (GHC.Types.[] @ t)
                   (BinTree.Empty @ GHC.Types.Int @ [t])) -}
"SPEC/Main $fEq(,) @ (BinTree String Float) @ Float" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                               (BinTree.BinTree
                                                                                  GHC.Base.String
                                                                                  GHC.Types.Float)
                                                                     $dEq1 :: GHC.Classes.Eq
                                                                                GHC.Types.Float
  GHC.Classes.$fEq(,) @ (BinTree.BinTree
                           GHC.Base.String GHC.Types.Float)
                      @ GHC.Types.Float
                      $dEq
                      $dEq1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,) @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                     (BinTree.BinTree
                                                                                        GHC.Base.String
                                                                                        GHC.Types.Float,
                                                                                      GHC.Types.Float)
                                                                           $dEq1 :: GHC.Classes.Eq
                                                                                      GHC.Types.Bool
  GHC.Classes.$fEq(,) @ (BinTree.BinTree
                           GHC.Base.String GHC.Types.Float,
                         GHC.Types.Float)
                      @ GHC.Types.Bool
                      $dEq
                      $dEq1
  = Main.$s$fEq(,)3
"SPEC/Main $fEqBinTree @ Char @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               GHC.Types.Char
                                                     $dEq1 :: GHC.Classes.Eq GHC.Types.Int
  BinTree.$fEqBinTree @ GHC.Types.Char @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEqBinTree4
"SPEC/Main $fEqBinTree @ Int @ Char" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               GHC.Types.Int
                                                     $dEq1 :: GHC.Classes.Eq GHC.Types.Char
  BinTree.$fEqBinTree @ GHC.Types.Int @ GHC.Types.Char $dEq $dEq1
  = Main.$s$fEqBinTree2
"SPEC/Main $fEqBinTree @ Int @ [Int]" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                GHC.Types.Int
                                                      $dEq1 :: GHC.Classes.Eq [GHC.Types.Int]
  BinTree.$fEqBinTree @ GHC.Types.Int @ [GHC.Types.Int] $dEq $dEq1
  = Main.$s$fEqBinTree
"SPEC/Main $fEqBinTree @ [Char] @ Float" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                   [GHC.Types.Char]
                                                         $dEq1 :: GHC.Classes.Eq GHC.Types.Float
  BinTree.$fEqBinTree @ [GHC.Types.Char] @ GHC.Types.Float $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEqBinTree
"SPEC/Main $fEqMaybe @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                      GHC.Types.Int
  GHC.Base.$fEqMaybe @ GHC.Types.Int $dEq = Main.$s$fEqMaybe
"SPEC/Main $fShow(,) @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                   (BinTree.BinTree
                                                                                      GHC.Base.String
                                                                                      GHC.Types.Float)
                                                                       $dShow1 :: GHC.Show.Show
                                                                                    GHC.Types.Float
  GHC.Show.$fShow(,) @ (BinTree.BinTree
                          GHC.Base.String GHC.Types.Float)
                     @ GHC.Types.Float
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)
"SPEC/Main $fShow(,) @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                         (BinTree.BinTree
                                                                                            GHC.Base.String
                                                                                            GHC.Types.Float,
                                                                                          GHC.Types.Float)
                                                                             $dShow1 :: GHC.Show.Show
                                                                                          GHC.Types.Bool
  GHC.Show.$fShow(,) @ (BinTree.BinTree
                          GHC.Base.String GHC.Types.Float,
                        GHC.Types.Float)
                     @ GHC.Types.Bool
                     $dShow
                     $dShow1
  = Main.$s$fShow(,)4
"SPEC/Main $fShow(,)_$cshow @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                          (BinTree.BinTree
                                                                                             GHC.Base.String
                                                                                             GHC.Types.Float)
                                                                              $dShow1 :: GHC.Show.Show
                                                                                           GHC.Types.Float
  GHC.Show.$fShow(,)_$cshow @ (BinTree.BinTree
                                 GHC.Base.String GHC.Types.Float)
                            @ GHC.Types.Float
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Main $fShow(,)_$cshow @ (BinTree String Float, Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                (BinTree.BinTree
                                                                                                   GHC.Base.String
                                                                                                   GHC.Types.Float,
                                                                                                 GHC.Types.Float)
                                                                                    $dShow1 :: GHC.Show.Show
                                                                                                 GHC.Types.Bool
  GHC.Show.$fShow(,)_$cshow @ (BinTree.BinTree
                                 GHC.Base.String GHC.Types.Float,
                               GHC.Types.Float)
                            @ GHC.Types.Bool
                            $dShow
                            $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshow1
"SPEC/Main $fShow(,)_$cshowList @ (BinTree String Float) @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                              (BinTree.BinTree
                                                                                                 GHC.Base.String
                                                                                                 GHC.Types.Float)
                                                                                  $dShow1 :: GHC.Show.Show
                                                                                               GHC.Types.Float
  GHC.Show.$fShow(,)_$cshowList @ (BinTree.BinTree
                                     GHC.Base.String GHC.Types.Float)
                                @ GHC.Types.Float
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Main $fShow(,)_$cshowList @ (BinTree String Float,
                                  Float) @ Bool" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                                                                      (BinTree.BinTree
                                                                                                                                         GHC.Base.String
                                                                                                                                         GHC.Types.Float,
                                                                                                                                       GHC.Types.Float)
                                                                                                                          $dShow1 :: GHC.Show.Show
                                                                                                                                       GHC.Types.Bool
  GHC.Show.$fShow(,)_$cshowList @ (BinTree.BinTree
                                     GHC.Base.String GHC.Types.Float,
                                   GHC.Types.Float)
                                @ GHC.Types.Bool
                                $dShow
                                $dShow1
  = Main.$s$fShow(,)_$s$fShow(,)_$cshowList1
"SPEC/Main $fShowBinTree @ Char @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                   GHC.Types.Char
                                                       $dShow1 :: GHC.Show.Show GHC.Types.Int
  BinTree.$fShowBinTree @ GHC.Types.Char
                        @ GHC.Types.Int
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree6
"SPEC/Main $fShowBinTree @ Int @ Char" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                   GHC.Types.Int
                                                       $dShow1 :: GHC.Show.Show GHC.Types.Char
  BinTree.$fShowBinTree @ GHC.Types.Int
                        @ GHC.Types.Char
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree3
"SPEC/Main $fShowBinTree @ Int @ [Int]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    GHC.Types.Int
                                                        $dShow1 :: GHC.Show.Show [GHC.Types.Int]
  BinTree.$fShowBinTree @ GHC.Types.Int
                        @ [GHC.Types.Int]
                        $dShow
                        $dShow1
  = Main.$s$fShowBinTree
"SPEC/Main $fShowBinTree @ [Char] @ Float" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       [GHC.Types.Char]
                                                           $dShow1 :: GHC.Show.Show GHC.Types.Float
  BinTree.$fShowBinTree @ [GHC.Types.Char]
                        @ GHC.Types.Float
                        $dShow
                        $dShow1
  = Main.$s$fShow(,)_$s$fShowBinTree
"SPEC/Main $fShowMaybe @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          GHC.Types.Int
  GHC.Show.$fShowMaybe @ GHC.Types.Int $dShow = Main.$s$fShowMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

